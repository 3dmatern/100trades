generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String           @id @default(cuid())
  nickname       String?
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  role           UserRole         @default(USER)
  sheets         Sheet[]
  tags           Tag[]
  sheetPublished SheetPublished[]
}

model Sheet {
  id      String   @id @default(cuid())
  userId  String
  name    String
  date    DateTime @default(dbgenerated("now()"))
  entries Entrie[]

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sheetPublished SheetPublished?
}

model SheetPublished {
  id          String   @id @default(cuid())
  userId      String
  sheetId     String   @unique
  name        String?
  pose        String?
  risk        String?
  profit      String?
  forecast    String?
  entryDate   String?
  imageStart  String?
  deposit     String?
  progress    String?
  exitDate    String?
  imageEnd    String?
  take        String?
  stress      String?
  notes       String?
  timeInTrade String?
  resultId    String?
  lsId        String?
  rrId        String?
  entrieTag   String?
  date        DateTime @default(dbgenerated("now()"))

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sheet Sheet @relation(fields: [sheetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Result {
  id      String   @id @default(cuid())
  label   String
  value   String
  type    Int
  entries Entrie[]
}

model LongShort {
  id      String   @id @default(cuid())
  label   String
  value   String
  type    Int
  entries Entrie[]
}

model RiskReward {
  id      String   @id @default(cuid())
  label   String
  value   String
  entries Entrie[]
}

model Tag {
  id        String      @id @default(cuid())
  userId    String
  label     String
  value     String
  entrieTag EntrieTag[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Entrie {
  id          String      @id @default(cuid())
  name        String?
  pose        String?
  risk        String?
  profit      String?
  forecast    String?
  entryDate   String?
  imageStart  String?
  deposit     String?
  progress    String?
  exitDate    String?
  imageEnd    String?
  take        String?
  stress      Int?
  notes       String?
  timeInTrade String?
  sheetId     String
  resultId    String?
  lsId        String?
  rrId        String?
  date        DateTime    @default(dbgenerated("now()"))
  entrieTag   EntrieTag[]

  sheet        Sheet       @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  result       Result?     @relation(fields: [resultId], references: [id])
  longShort    LongShort?  @relation(fields: [lsId], references: [id])
  riskReward   RiskReward? @relation(fields: [rrId], references: [id])
}

model EntrieTag {
  id       String   @id @default(cuid())
  entrieId String
  tagId    String
  date     DateTime @default(dbgenerated("now()"))

  entries Entrie @relation(fields: [entrieId], references: [id], onDelete: Cascade)
  tags    Tag    @relation(fields: [tagId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
